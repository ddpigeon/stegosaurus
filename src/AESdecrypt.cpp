#include "../include/stego_main.h"
#include <iostream>
#include <sstream>
#include <string>

/* AES Decryption follows an algorithm much like the AES Encryption algorithm.
 *
 * (1) We first perform "Key Expansion" which generates as many keys as required from the base key passed in by the user
 */

namespace AES{
	class Decryptor{
		public:
			//Declaration of look up tables

			Decryptor() = delete;
			Decryptor(unsigned char *cipherTextSetter,unsigned char *initializationVectorSetter, unsigned char *keySetter,size_t blocksSetter) : cipherText{cipherTextSetter}, key{keySetter}, blocksDecrypted{0}, initializationVector{initializationVectorSetter}, blocks{blocksSetter}
			{
				words = new unsigned char*[44];
				for(size_t i = 0;i<44;i++){
					words[i] = new unsigned char[4];
				}
			}

			~Decryptor(){
				for(size_t i = 0;i<44;i++){
					delete[] words[i];
				}
				delete[] words;
			}

			unsigned char *key;
			unsigned char *initializationVector;
			unsigned char *cipherText;
			size_t blocks;
			vector<unsigned char> plainText;

			static const unsigned char s_box[256];
			static const unsigned char inverse_s_box[256];
			static const unsigned char mul9[256];
			static const unsigned char mul11[256];
			static const unsigned char mul13[256];
			static const unsigned char mul14[256];
			static const unsigned char rcon[11];

			// Key Expansion Functions
			void keyExpansion();
			void keyExpansionCore(unsigned char *currentWord, unsigned char rconIndex);
			void originalKeyCopy(unsigned char **target);

			// Round Functions
			unsigned char* addRoundKey(unsigned char *state, int key);
			unsigned char* inverseSubBytes(unsigned char *state);
			unsigned char* inverseShiftRows(unsigned char *state);
			unsigned char* inverseMixColumns(unsigned char *state);

			//AES Decrypt Functions
			void decryptCipherBlock(unsigned char *cipherBlock, unsigned char *chain);
			void removePkcsPadding();
			void decryptCipher();

		private:
			unsigned char **words;
			size_t blocksDecrypted;
	};
}

const unsigned char AES::Decryptor::s_box[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
}; 

const unsigned char AES::Decryptor::inverse_s_box[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

const unsigned char AES::Decryptor::rcon[11] = {
	0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
};

const unsigned char AES::Decryptor::mul9[256] = {
    0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77,
    0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7,
    0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c,
    0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc,
    0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01,
    0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91,
    0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a,
    0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa,
    0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b,
    0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b,
    0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0,
    0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30,
    0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed,
    0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d,
    0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6,
    0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46
};

const unsigned char AES::Decryptor::mul11[256] = {
    0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69,
    0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9,
    0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12,
    0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2,
    0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f,
    0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f,
    0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4,
    0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54,
    0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e,
    0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e,
    0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5,
    0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55,
    0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68,
    0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8,
    0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13,
    0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3
};

const unsigned char AES::Decryptor::mul13[256] = {
    0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b,
    0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b,
    0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0,
    0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20,
    0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26,
    0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6,
    0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d,
    0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d,
    0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91,
    0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41,
    0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a,
    0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa,
    0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc,
    0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c,
    0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47,
    0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97
};

const unsigned char AES::Decryptor::mul14[256] = {
    0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a,
    0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba,
    0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81,
    0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61,
    0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7,
    0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17,
    0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c,
    0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc,
    0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b,
    0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb,
    0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0,
    0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20,
    0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6,
    0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56,
    0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d,
    0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d
};

void AES::Decryptor::keyExpansionCore(unsigned char *currentWord, unsigned char rconIndex){
		// The key expansion core is run only once per Round key in order to generate the first word.

		//Rotation of the Previous 4 Bytes (Word)
		unsigned char temp = currentWord[0];
		currentWord[0] = currentWord[1];
		currentWord[1] = currentWord[2];
		currentWord[2] = currentWord[3];
		currentWord[3] = temp;

		//Substitution through the S-Box
		currentWord[0] = AES::Decryptor::s_box[currentWord[0]];
		currentWord[1] = AES::Decryptor::s_box[currentWord[1]];
		currentWord[2] = AES::Decryptor::s_box[currentWord[2]];
		currentWord[3] = AES::Decryptor::s_box[currentWord[3]];

		//Running the RCon XOR
		currentWord[0] ^= rcon[rconIndex]; 
}

void AES::Decryptor::originalKeyCopy(unsigned char **target){
	for (size_t i = 0; i < 4;i++){
		for (size_t j = 0; j < 4;j++){
			target[i][j] = key[i * 4 + j];
		}
	}
}

void AES::Decryptor::keyExpansion(){

	// wordsGenerated -> Keeps a count of the words generated till now
	// RconIndex -> Keeps the value of i between 1 to 10 as per the AES-128 Bit Encryption
	// prevWord -> If word W_i is to be generated, prevWord stores W_(i-1)
	// xorWord -> If word W_i is to be generated, xorWord stores W_(i-4)

	originalKeyCopy(words);

	int wordsGenerated = 4;
	unsigned char RconIndex = 1;
	const unsigned char *prevWord;
	const unsigned char *xorWord;
	unsigned char *currentWord = new unsigned char[4];

	while(wordsGenerated<44){
		prevWord = words[wordsGenerated-1];
		xorWord = words[wordsGenerated-4];
		for(size_t i = 0;i<4;i++){
			currentWord[i] = prevWord[i];
		}
		if(wordsGenerated%4==0){
			//We need to generate a new core!
			keyExpansionCore(currentWord, RconIndex++);						
		}

		//Xoring W_(i-1) with W_(i-4) and setting it equal to the new Word
		for(size_t i = 0;i<4;i++){
			words[wordsGenerated][i]=currentWord[i]^xorWord[i];
		}

		wordsGenerated++;
	}
}

unsigned char* AES::Decryptor::addRoundKey(unsigned char *state, int roundNumber){
	int inverseRoundNumber = 10 - roundNumber;

	for (int i = 0; i < 4;i++){
		for (int j = 0; j < 4;j++){
			state[i * 4 + j] ^= words[inverseRoundNumber * 4 + i][j];
		}
	}

	// printer(state);
	return state;
}

unsigned char* AES::Decryptor::inverseSubBytes(unsigned char *state){
	for (size_t i = 0; i < 16;i++){
		state[i] = inverse_s_box[state[i]];
	}
	// printer(state);
	return state;
}

unsigned char* AES::Decryptor::inverseShiftRows(unsigned char *state){
	unsigned char *shiftedState = new unsigned char[16];

	shiftedState[0] = state[0];
	shiftedState[1] = state[13];
	shiftedState[2] = state[10];
	shiftedState[3] = state[7];
	shiftedState[4] = state[4];
	shiftedState[5] = state[1];
	shiftedState[6] = state[14];
	shiftedState[7] = state[11];
	shiftedState[8] = state[8];
	shiftedState[9] = state[5];
	shiftedState[10] = state[2];
	shiftedState[11] = state[15];
	shiftedState[12] = state[12];
	shiftedState[13] = state[9];
	shiftedState[14] = state[6];
	shiftedState[15] = state[3];

	for(size_t i = 0;i<16;i++){
		state[i] = shiftedState[i];
	}

	// printer(state);
	return state;
}

unsigned char* AES::Decryptor::inverseMixColumns(unsigned char *state){
	using aes = AES::Decryptor;

	unsigned char *mixedState = new unsigned char[16];

	for (size_t i = 0; i < 4;i++){
		mixedState[i*4] = static_cast<unsigned char>(aes::mul14[state[i*4]] ^ aes::mul11[state[i*4+1]] ^ aes::mul13[state[i*4+2]] ^ aes::mul9[state[i*4+3]]);
		mixedState[i*4+1] = static_cast<unsigned char>(aes::mul9[state[i*4]] ^ aes::mul14[state[i*4+1]] ^ aes::mul11[state[i*4+2]] ^ aes::mul13[state[i*4+3]]);
		mixedState[i*4+2] = static_cast<unsigned char>(aes::mul13[state[i*4]] ^ aes::mul9[state[i*4+1]] ^ aes::mul14[state[i*4+2]] ^ aes::mul11[state[i*4+3]]);
		mixedState[i*4+3] = static_cast<unsigned char>(aes::mul11[state[i*4]] ^ aes::mul13[state[i*4+1]] ^ aes::mul9[state[i*4+2]] ^ aes::mul14[state[i*4+3]]);
	}

	for (size_t i = 0; i < 16;i++){
		state[i] = mixedState[i];
	}

	// printer(state);
	return state;
}

void AES::Decryptor::decryptCipherBlock(unsigned char *cipherBlock, unsigned char *chain){
	addRoundKey(cipherBlock, 0); // Add Round Key Initially (Key 11 in the expanded keys set)
	// printer(cipherBlock);
	for (size_t round_no = 1; round_no < 10; round_no++)
	{
		inverseMixColumns(addRoundKey(inverseSubBytes(inverseShiftRows(cipherBlock)), round_no));
	}
	addRoundKey(inverseSubBytes(inverseShiftRows(cipherBlock)), 10); // Final Round without the InverseMixColumns
	// cipherBlock has been decrypted through the AES key;

	// Running the XOR with the previous block in the chain;
	for (size_t i = 0; i < 16; i++)
	{
		cipherBlock[i] = cipherBlock[i] ^ chain[i];
	}

	for (size_t i = 0; i < 16;i++){
		plainText.push_back(cipherBlock[i]);
	}
	// printer(cipherBlock);
	blocksDecrypted++;
}

void AES::Decryptor::removePkcsPadding(){
	int bytesOffset = (blocksDecrypted - 1) * 16;
	int pkcsIdentifier = plainText[plainText.size()-1];
	for (size_t i = bytesOffset + 16 - pkcsIdentifier; i < plainText.size();i++){
		vector<unsigned char>::iterator it = plainText.begin() + i;
		plainText.erase(it);
		i--;
	}
}

void AES::Decryptor::decryptCipher(){
	unsigned char *block = new unsigned char[16];

	for (size_t i = 0; i < 16;i++){
		block[i] = cipherText[i];
	}
	
	decryptCipherBlock(block, initializationVector);
	for (size_t i = 1; i < blocks; i++)
	{
		unsigned char *prevBlock = new unsigned char[16];
		for (size_t j = 0; j < 16; j++)
		{
			prevBlock[j] = cipherText[(i - 1) * 16 + j];
			block[j] = cipherText[i * 16 + j];
		}

		decryptCipherBlock(block, prevBlock);
	}
}

void stego::AESdecrypt() {
	std::string message_string = message_buffer.str();
	const char *message_string_c = message_string.c_str();
	unsigned char *cipherText = new unsigned char[message_string.length()];
	for (size_t i = 0; i < message_string.length();i++){
		cipherText[i] = message_string_c[i];
	}

	std::string initializationVectorString;
	std::string keyString;
	std::cout << "Enter the Initialization Vector:";
	std::cin >> initializationVectorString;
	std::cout << "Enter the Key:";
	std::cin >> keyString;

	const char *initializationVectorCString = initializationVectorString.c_str();
	const char *keyCString = keyString.c_str();

	unsigned char *initializationVector = new unsigned char[16];
	unsigned char *key = new unsigned char[16];

	for (size_t i = 0; i < 16;i++){
		initializationVector[i] = initializationVectorCString[i];
		key[i] = keyCString[i];
	}

	size_t blocks = message_string.length() / 16;

	AES::Decryptor *decryptor = new AES::Decryptor(cipherText, initializationVector, key, blocks);
	decryptor->keyExpansion();
	decryptor->decryptCipher();
	decryptor->removePkcsPadding();

	char *plainTextFromCipher = new char[decryptor->plainText.size()];
	for (size_t i = 0; i < decryptor->plainText.size();i++){
		plainTextFromCipher[i] = decryptor->plainText[i];
	}

	std::string decryptedString{plainTextFromCipher};
	message_buffer.str(decryptedString);
}

int main(){
	// unsigned char cipherText[] = {
	// 	0x83,0xee,0x34,0x74,0xa8,0x09,0xd6,0xe0,0x87,0x23,0xa1,0xa8,0xa0,0x6b,0x0c,0xdd,0xba,0xef,0x98,0x8d,0x14,0xb3,0xed,0xbd,0xd5,0x44,0x59,0x16,0x21,0x45,0x54,0xc7,0xfe,0x49,0x95,0x65,0x1d,0xb7,0x65,0x01,0x6d,0x63,0x6d,0x47,0x9f,0x15,0x0b,0x85,0x03,0x91,0x07,0xc4,0x51,0xa4,0x6e,0xf0,0x4d,0x7e,0x0e,0xa2,0x75,0x65,0xe6,0x12};
	// unsigned char initializationVector[] = {"encryptionIntVec"};
	// unsigned char key[] = {"aesEncryptionKey"};
	// AES::Decryptor *decryptor = new AES::Decryptor(cipherText, initializationVector, key, 4);
	// decryptor->keyExpansion();
	// decryptor->decryptCipher();
	// decryptor->removePkcsPadding();

	// for (size_t i = 0; i < decryptor->plainText.size();i++){
	// 	std::cout << decryptor->plainText[i];
	// }
	// std::cout << std::endl;
}